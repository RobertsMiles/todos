#!/bin/bash

### function definitions ###

# calculates how many days from now a date is
days_from_now() {
    # get dates
    local today=$(date +%F)
    local date=$1
    
    # get year of each date
    local year_today=$(date +%Y)
    local year_date=$(date --date=$date +%Y)

    # difference of years
    local year_diff=$(( year_date - year_today ))

    # get day of the year for each date
    local day_today=$(date --date=$today +%j)
    local day_date=$(date --date=$date +%j)

    # find min/max year
    local min_year max_year direction_from_today
    if (( year_today < year_date )); then
        direction_from_today=1
        min_year=$year_today
        max_year=$year_date
    else
        direction_from_today=-1
        max_year=$year_today
        min_year=$year_date
    fi

    # find leap days
    local leap_days=0
    for (( i = min_year ; i < max_year ; i++ )); do
        if (( !(i % 4) && (i % 100) )); then
            leap_days=$(( leap_days + direction_from_today ))
        fi
    done

    # put day_date in terms of year_today
    day_date=$(( day_date + $(( 365 * year_diff )) + leap_days )) 

    # get difference of days
    diff=$(( day_date - day_today ))
}

# print selected date and its tasks
print_day() {
    local date=$1
    
    #if [[ $date == $(date +%F) ]]; then
    #    printf "* "
    #fi
    days_from_now $date
    printf "%3s " $diff
    printf "\033[32m"
    date --date=$date '+%A, %B %d, %Y'
    printf "\033[0m"
    
    if [ -f $date ] ; then
        printf "\033[0m"
        cat -n $date
        printf "\033[0m"
    fi
    echo
}

# changes the date being used
change_day() {
    exit_status="1"
    while [[ $exit_status != "0" ]]; do
        echo -n "Enter desired day: "
        read input
        date=$(date --date="$input" +%F)
        exit_status=$(echo $?)
    done
}

# adds a new task to the given date
add_task() {
    echo -n ">>> "
    read input
    echo $input >> $date
}

# removes a task from the given date
remove_task() {
    echo -n "Enter line number: "
    read input
    sed -i -e ${input}d $date

    # if all tasks are removed, also delete the date entry
    if [[ $(cat $date) == "" ]]; then
        rm $date
    fi
}

# print all tasks
show_all_tasks() {
    clear
    if [ -z "$(ls .)" ]; then
        echo "All tasks are complete!"
    else
        for date_file in *; do
            print_day $date_file
        done
    fi
    printf "\033[31mPress enter to continue...\033[0m"
    read input
}

# gets users' choice
get_choice() {
    printf "\033[31m(c)\033[0mhange day; \033[31m(a)\033[0mdd task; \033[31m(r)\033[0memove task; \033[31m(s)\033[0mhow all tasks; \033[31m(q)\033[0muit: "
    read input
}

# gets main directory from the config file,
# if the config file does not exists,
# prompt the user to enter a directory
set_directory() {
    if ! cat ~/.config/todos/directory.conf &>/dev/null; then
        mkdir -p ~/.config/todos
        printf "Enter directory to store todos: "
        read directory
        echo $directory > ~/.config/todos/directory.conf
        mkdir -p $directory
    fi
    directory=$(cat ~/.config/todos/directory.conf)
}



### main script ###
clear
set_directory
cd $directory
date=$(date +%F)
while [[ $input != "q" ]]; do
    print_day $date
    get_choice
    case $input in
        "c")
            change_day
            ;;
        "a")
            add_task
            ;;
        "r")
            remove_task
            ;;
        "s")
            show_all_tasks
            ;;
    esac
    clear
done
